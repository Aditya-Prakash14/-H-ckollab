generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique // Clerk.js user ID
  email       String   @unique
  firstName   String
  lastName    String
  username    String?  @unique
  bio         String?
  location    String?
  website     String?
  github      String?
  linkedin    String?
  twitter     String?
  portfolio   String?
  imageUrl    String?
  
  // Professional details
  title       String?
  experience  ExperienceLevel @default(BEGINNER)
  availability AvailabilityStatus @default(AVAILABLE)
  hourlyRate  Decimal?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastActive  DateTime @default(now())
  
  // Relations
  skills           UserSkill[]
  ownedProjects    Project[]      @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  projectInvites   ProjectInvite[]
  sentMessages     Message[]      @relation("MessageSender")
  receivedMessages Message[]      @relation("MessageReceiver")
  reviews          Review[]       @relation("ReviewAuthor")
  receivedReviews  Review[]       @relation("ReviewTarget")
  notifications    Notification[]
  
  @@map("users")
}

model Skill {
  id          String      @id @default(cuid())
  name        String      @unique
  category    SkillCategory
  icon        String?     // Icon name or URL
  color       String?     // Hex color code
  description String?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  userSkills     UserSkill[]
  projectSkills  ProjectSkill[]
  
  @@map("skills")
}

model UserSkill {
  id        String      @id @default(cuid())
  userId    String
  skillId   String
  level     SkillLevel  @default(BEGINNER)
  yearsExp  Int?        // Years of experience with this skill
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill     Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@unique([userId, skillId])
  @@map("user_skills")
}

model Project {
  id              String        @id @default(cuid())
  title           String
  description     String
  detailedDesc    String?       // Rich text description
  status          ProjectStatus @default(PLANNING)
  visibility      ProjectVisibility @default(PUBLIC)
  
  // Project details
  startDate       DateTime?
  endDate         DateTime?
  estimatedHours  Int?
  budget          Decimal?
  isRemote        Boolean       @default(true)
  location        String?
  
  // Repository info
  githubUrl       String?
  liveUrl         String?
  figmaUrl        String?
  
  // Owner info
  ownerId         String
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  owner           User          @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members         ProjectMember[]
  skills          ProjectSkill[]
  invites         ProjectInvite[]
  messages        Message[]
  reviews         Review[]
  
  @@map("projects")
}

model ProjectMember {
  id        String           @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole      @default(MEMBER)
  joinedAt  DateTime         @default(now())
  leftAt    DateTime?
  
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectSkill {
  id        String     @id @default(cuid())
  projectId String
  skillId   String
  required  Boolean    @default(false)
  priority  Priority   @default(MEDIUM)
  
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  skill     Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, skillId])
  @@map("project_skills")
}

model ProjectInvite {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  message   String?
  status    InviteStatus @default(PENDING)
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("project_invites")
}

model Message {
  id         String      @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  projectId  String?     // Optional: message related to a project
  
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  readAt     DateTime?
  
  sender     User        @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User        @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  project    Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("messages")
}

model Review {
  id        String     @id @default(cuid())
  rating    Int        // 1-5 stars
  comment   String?
  authorId  String
  targetId  String     // User being reviewed
  projectId String?    // Optional: review related to a project
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  author    User       @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  target    User       @relation("ReviewTarget", fields: [targetId], references: [id], onDelete: Cascade)
  project   Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@unique([authorId, targetId, projectId])
  @@map("reviews")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional data as JSON
  read      Boolean          @default(false)
  
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// Enums
enum ExperienceLevel {
  BEGINNER     // 0-1 years
  INTERMEDIATE // 1-3 years
  ADVANCED     // 3-5 years
  EXPERT       // 5+ years
}

enum AvailabilityStatus {
  AVAILABLE
  BUSY
  NOT_AVAILABLE
}

enum SkillCategory {
  FRONTEND
  BACKEND
  MOBILE
  DEVOPS
  DESIGN
  DATA
  AI_ML
  BLOCKCHAIN
  CYBERSECURITY
  TESTING
  PROJECT_MANAGEMENT
  OTHER
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
  INVITE_ONLY
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  CONTRIBUTOR
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum NotificationType {
  PROJECT_INVITE
  MESSAGE
  PROJECT_UPDATE
  REVIEW
  MENTION
  SYSTEM
}
